# Redirecting the '/' root to '/en'
location = / {
    content_by_lua '
      return ngx.redirect("/en")
    ';
}

# Lua app routes /LL/page
location ~ "(^\/[a-z]{2}$)|(^\/[a-z]{2}\/[\w\-\/]*)" {
    content_by_lua_file $root/app/controller.lua;
}

location /api/stripe/hook {
    content_by_lua '
        local file = io.open("/tmp/stripe_hook.log", "a")

        file:write("--- header ---\\n")
        local headers = ngx.req.get_headers()
        for key, value in pairs(headers) do
            file:write(key, ": ", value, "\\n")
        end

        file:write("--- body ---\\n")
        ngx.req.read_body()
        file:write(ngx.var.request_body, "\\n")

        file:close()

        ngx.say("ok")
        return ngx.exit(200)
    ';
}

location /api/donation/donate {
    content_by_lua '
        ngx.req.read_body()
        local args = ngx.req.get_post_args()
        local amount = args["amount"]
        local currency = args["currency"]
        local email = args["email"]
        local public = args["public"]
        local provider = args["provider"]
        local name = args["publicName"]
        local token = args["token"]

        if not (amount and currency and email and public and name) then
            ngx.say("No valid set of arguments supplied.")
            return ngx.exit(204)
        end

        email = string.lower(email)

        if not (provider == "stripe" or provider == "paypal") then
            ngx.say("No valid provider supplied.")
            return ngx.exit(204)
        end
        if not (email:match("[A-Za-z0-9%.%%%+%-]+@[A-Za-z0-9%.%%%+%-]+%.%w%w%w?%w?")) then
            ngx.say("No valid email address supplied.")
            return ngx.exit(408)
        end
        if not (currency == "USD" or currency == "EUR" or currency == "GPB") then
            ngx.say("No valid currency supplied.")
            return ngx.exit(204)
        end

        if provider == "stripe" then
            if not token then
                ngx.say("No valid token supplied.")
                return ngx.exit(204)
            end
        end

        if provider == "paypal" then
            token = "paypal"
        end

        if tonumber(amount) ~= nil then
            amount = tonumber(amount)
        else
            ngx.say("No valid amount supplied.")
            return ngx.exit(204)
        end

        if not (1 <= amount and amount <= 100000) then
            ngx.say("No valid amount supplied.")
            return ngx.exit(204)
        end

        if string.len(email) >= 255 then
            ngx.say("Email address to long.")
            return ngx.exit(406)
        end

        if string.len(name) >= 30 then
            ngx.say("Public name to long.")
            return ngx.exit(407)
        end

        local redis = require "resty.redis"
        local red = redis:new()
        red:set_timeout(1000)
        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.log(ngx.ERR, "Failed to connect to redis: ", err)
            return ngx.exit(500)
        end

        local json = "{\\"email\\":\\"" .. email .. "\\",\\"token\\":\\"" .. token .. "\\",\\"currency\\":\\"" .. currency .. "\\",\\"amount\\":\\"" .. amount .. "\\",\\"public\\":\\"" .. public .. "\\",\\"name\\":\\"" .. name .. "\\",\\"created_at\\":\\"" .. ngx.localtime() .. "\\"}"
        local saved, err = red:lpush("donations", json)

        if not saved then
            ngx.say("Failed to save your donation.")
        else
            ngx.say("Successfully received your donation.")
        end

        return ngx.exit(201)
    ';
}

location /api/mailing/signup {
    content_by_lua '
        ngx.req.read_body()
        local args = ngx.req.get_post_args()
        local email = args["email"]

        if not email then
            ngx.say("No valid email address supplied.")
            return ngx.exit(204)
        end

        if not (email:match("[A-Za-z0-9%.%%%+%-]+@[A-Za-z0-9%.%%%+%-]+%.%w%w%w?%w?")) then
            ngx.say("No valid email address supplied.")
            return ngx.exit(406)
        end

        email = string.lower(email)

        if string.len(email) >= 255 then
            ngx.say("Your email address is to long.")
            return ngx.exit(406)
        end

        local redis = require "resty.redis"
        local red = redis:new()
        red:set_timeout(1000)
        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.log(ngx.ERR, "Failed to connect to redis: ", err)
            return ngx.exit(500)
        end

        local json = "{\\"class\\":\\"SendWelcomeEmail\\",\\"args\\":[\\"" .. email .. "\\"]}"
        local saved, err = red:lpush("mailing", json)

        if not saved then
            ngx.say("Failed to save ", email, "...")
        else
            ngx.say("Successfully signed up ", email, "!")
        end

        return ngx.exit(201)
    ';
}

location /api/mailing/signoff {
    content_by_lua '
        return ngx.exit(201)
    ';
}

location /api/rate-limit {
    content_by_lua '
        ngx.say("Rate limit on: ", ngx.req.get_headers()["x-forwarded-for"])
    ';
}

# Redirect old pages
location /questions {       rewrite .* /en/faq permanent; }
location /plan {            rewrite .* /en/about permanent; }
location /idea {            rewrite .* /en/about permanent; }
location /en/goals {        rewrite .* /en/about permanent; }
location /en/get-involved { rewrite .* https://community.phonebloks.com permanent; }
location /en/community {    rewrite .* https://community.phonebloks.com permanent; }

# Index
location / {
    charset UTF-8;
    root  $root/public;
    # root /Users/gawin/home/projects/phonebloks/sites/www/v5/app/public;
    error_page 404 =  @foobar;
}

location @foobar {
    rewrite  .*  / permanent;
}